# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'datetime',
        'type': 'str',
        'email': 'str',
        'err': 'bool',
        'err_msg': 'str',
        'id': 'int',
        'img_generation_remaining_count': 'int',
        'img_quantity': 'int',
        'project_description': 'str',
        'project_name': 'str',
        'status': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'create_time': 'CreateTime',
        'type': 'Type',
        'email': 'email',
        'err': 'err',
        'err_msg': 'err_msg',
        'id': 'id',
        'img_generation_remaining_count': 'img_generation_remaining_count',
        'img_quantity': 'img_quantity',
        'project_description': 'project_description',
        'project_name': 'project_name',
        'status': 'status',
        'user_id': 'user_id'
    }

    def __init__(self, create_time=None, type=None, email=None, err=None, err_msg=None, id=None, img_generation_remaining_count=None, img_quantity=None, project_description=None, project_name=None, status=None, user_id=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._create_time = None
        self._type = None
        self._email = None
        self._err = None
        self._err_msg = None
        self._id = None
        self._img_generation_remaining_count = None
        self._img_quantity = None
        self._project_description = None
        self._project_name = None
        self._status = None
        self._user_id = None
        self.discriminator = None
        if create_time is not None:
            self.create_time = create_time
        if type is not None:
            self.type = type
        if email is not None:
            self.email = email
        if err is not None:
            self.err = err
        if err_msg is not None:
            self.err_msg = err_msg
        if id is not None:
            self.id = id
        if img_generation_remaining_count is not None:
            self.img_generation_remaining_count = img_generation_remaining_count
        if img_quantity is not None:
            self.img_quantity = img_quantity
        if project_description is not None:
            self.project_description = project_description
        if project_name is not None:
            self.project_name = project_name
        if status is not None:
            self.status = status
        if user_id is not None:
            self.user_id = user_id

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse2005.  # noqa: E501

        The creation time of the project  # noqa: E501

        :return: The create_time of this InlineResponse2005.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse2005.

        The creation time of the project  # noqa: E501

        :param create_time: The create_time of this InlineResponse2005.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def type(self):
        """Gets the type of this InlineResponse2005.  # noqa: E501

        Type of project; either 'AI Model training' or 'Image generation'  # noqa: E501

        :return: The type of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2005.

        Type of project; either 'AI Model training' or 'Image generation'  # noqa: E501

        :param type: The type of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def email(self):
        """Gets the email of this InlineResponse2005.  # noqa: E501

        Email of the project owner  # noqa: E501

        :return: The email of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse2005.

        Email of the project owner  # noqa: E501

        :param email: The email of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def err(self):
        """Gets the err of this InlineResponse2005.  # noqa: E501

        Indicates whether the request was successful or if there was an error (true or false)  # noqa: E501

        :return: The err of this InlineResponse2005.  # noqa: E501
        :rtype: bool
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this InlineResponse2005.

        Indicates whether the request was successful or if there was an error (true or false)  # noqa: E501

        :param err: The err of this InlineResponse2005.  # noqa: E501
        :type: bool
        """

        self._err = err

    @property
    def err_msg(self):
        """Gets the err_msg of this InlineResponse2005.  # noqa: E501

        A message providing additional details of the operation  # noqa: E501

        :return: The err_msg of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._err_msg

    @err_msg.setter
    def err_msg(self, err_msg):
        """Sets the err_msg of this InlineResponse2005.

        A message providing additional details of the operation  # noqa: E501

        :param err_msg: The err_msg of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._err_msg = err_msg

    @property
    def id(self):
        """Gets the id of this InlineResponse2005.  # noqa: E501

        Project ID  # noqa: E501

        :return: The id of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2005.

        Project ID  # noqa: E501

        :param id: The id of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def img_generation_remaining_count(self):
        """Gets the img_generation_remaining_count of this InlineResponse2005.  # noqa: E501

        Number of image generations remaining  # noqa: E501

        :return: The img_generation_remaining_count of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._img_generation_remaining_count

    @img_generation_remaining_count.setter
    def img_generation_remaining_count(self, img_generation_remaining_count):
        """Sets the img_generation_remaining_count of this InlineResponse2005.

        Number of image generations remaining  # noqa: E501

        :param img_generation_remaining_count: The img_generation_remaining_count of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._img_generation_remaining_count = img_generation_remaining_count

    @property
    def img_quantity(self):
        """Gets the img_quantity of this InlineResponse2005.  # noqa: E501

        The number of images currently under the project  # noqa: E501

        :return: The img_quantity of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._img_quantity

    @img_quantity.setter
    def img_quantity(self, img_quantity):
        """Sets the img_quantity of this InlineResponse2005.

        The number of images currently under the project  # noqa: E501

        :param img_quantity: The img_quantity of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._img_quantity = img_quantity

    @property
    def project_description(self):
        """Gets the project_description of this InlineResponse2005.  # noqa: E501

        The description of the project  # noqa: E501

        :return: The project_description of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this InlineResponse2005.

        The description of the project  # noqa: E501

        :param project_description: The project_description of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._project_description = project_description

    @property
    def project_name(self):
        """Gets the project_name of this InlineResponse2005.  # noqa: E501

        The name of the project  # noqa: E501

        :return: The project_name of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this InlineResponse2005.

        The name of the project  # noqa: E501

        :param project_name: The project_name of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def status(self):
        """Gets the status of this InlineResponse2005.  # noqa: E501

        The current status of the project  # noqa: E501

        :return: The status of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2005.

        The current status of the project  # noqa: E501

        :param status: The status of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse2005.  # noqa: E501

        The user ID associated with the project  # noqa: E501

        :return: The user_id of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse2005.

        The user ID associated with the project  # noqa: E501

        :param user_id: The user_id of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
