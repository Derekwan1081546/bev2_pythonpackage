# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20014(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'last_updated': 'datetime',
        'requirement1': 'object',
        'requirement2': 'object',
        'author': 'str',
        'err': 'bool',
        'err_msg': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'last_updated': 'LastUpdated',
        'requirement1': 'Requirement1',
        'requirement2': 'Requirement2',
        'author': 'author',
        'err': 'err',
        'err_msg': 'err_msg'
    }

    def __init__(self, id=None, last_updated=None, requirement1=None, requirement2=None, author=None, err=None, err_msg=None):  # noqa: E501
        """InlineResponse20014 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated = None
        self._requirement1 = None
        self._requirement2 = None
        self._author = None
        self._err = None
        self._err_msg = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated is not None:
            self.last_updated = last_updated
        if requirement1 is not None:
            self.requirement1 = requirement1
        if requirement2 is not None:
            self.requirement2 = requirement2
        if author is not None:
            self.author = author
        if err is not None:
            self.err = err
        if err_msg is not None:
            self.err_msg = err_msg

    @property
    def id(self):
        """Gets the id of this InlineResponse20014.  # noqa: E501

        Identifier for the requirement document  # noqa: E501

        :return: The id of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20014.

        Identifier for the requirement document  # noqa: E501

        :param id: The id of this InlineResponse20014.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this InlineResponse20014.  # noqa: E501

        The last updated timestamp for the requirement  # noqa: E501

        :return: The last_updated of this InlineResponse20014.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this InlineResponse20014.

        The last updated timestamp for the requirement  # noqa: E501

        :param last_updated: The last_updated of this InlineResponse20014.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def requirement1(self):
        """Gets the requirement1 of this InlineResponse20014.  # noqa: E501

        Information about the first requirement  # noqa: E501

        :return: The requirement1 of this InlineResponse20014.  # noqa: E501
        :rtype: object
        """
        return self._requirement1

    @requirement1.setter
    def requirement1(self, requirement1):
        """Sets the requirement1 of this InlineResponse20014.

        Information about the first requirement  # noqa: E501

        :param requirement1: The requirement1 of this InlineResponse20014.  # noqa: E501
        :type: object
        """

        self._requirement1 = requirement1

    @property
    def requirement2(self):
        """Gets the requirement2 of this InlineResponse20014.  # noqa: E501

        Information about the second requirement  # noqa: E501

        :return: The requirement2 of this InlineResponse20014.  # noqa: E501
        :rtype: object
        """
        return self._requirement2

    @requirement2.setter
    def requirement2(self, requirement2):
        """Sets the requirement2 of this InlineResponse20014.

        Information about the second requirement  # noqa: E501

        :param requirement2: The requirement2 of this InlineResponse20014.  # noqa: E501
        :type: object
        """

        self._requirement2 = requirement2

    @property
    def author(self):
        """Gets the author of this InlineResponse20014.  # noqa: E501

        Author of the requirement  # noqa: E501

        :return: The author of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this InlineResponse20014.

        Author of the requirement  # noqa: E501

        :param author: The author of this InlineResponse20014.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def err(self):
        """Gets the err of this InlineResponse20014.  # noqa: E501

        Indicates whether the request was successful or if there was an error (true or false)  # noqa: E501

        :return: The err of this InlineResponse20014.  # noqa: E501
        :rtype: bool
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this InlineResponse20014.

        Indicates whether the request was successful or if there was an error (true or false)  # noqa: E501

        :param err: The err of this InlineResponse20014.  # noqa: E501
        :type: bool
        """

        self._err = err

    @property
    def err_msg(self):
        """Gets the err_msg of this InlineResponse20014.  # noqa: E501

        A message providing additional details of the retrieval operation  # noqa: E501

        :return: The err_msg of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._err_msg

    @err_msg.setter
    def err_msg(self, err_msg):
        """Sets the err_msg of this InlineResponse20014.

        A message providing additional details of the retrieval operation  # noqa: E501

        :param err_msg: The err_msg of this InlineResponse20014.  # noqa: E501
        :type: str
        """

        self._err_msg = err_msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20014, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20014):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
