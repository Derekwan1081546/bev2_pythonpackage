# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20029(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inference_time': 'str',
        'detections': 'list[object]',
        'image_id': 'str'
    }

    attribute_map = {
        'inference_time': 'inferenceTime',
        'detections': 'detections',
        'image_id': 'image_id'
    }

    def __init__(self, inference_time=None, detections=None, image_id=None):  # noqa: E501
        """InlineResponse20029 - a model defined in Swagger"""  # noqa: E501
        self._inference_time = None
        self._detections = None
        self._image_id = None
        self.discriminator = None
        if inference_time is not None:
            self.inference_time = inference_time
        if detections is not None:
            self.detections = detections
        if image_id is not None:
            self.image_id = image_id

    @property
    def inference_time(self):
        """Gets the inference_time of this InlineResponse20029.  # noqa: E501

        The time taken to complete the inference  # noqa: E501

        :return: The inference_time of this InlineResponse20029.  # noqa: E501
        :rtype: str
        """
        return self._inference_time

    @inference_time.setter
    def inference_time(self, inference_time):
        """Sets the inference_time of this InlineResponse20029.

        The time taken to complete the inference  # noqa: E501

        :param inference_time: The inference_time of this InlineResponse20029.  # noqa: E501
        :type: str
        """

        self._inference_time = inference_time

    @property
    def detections(self):
        """Gets the detections of this InlineResponse20029.  # noqa: E501

        The result of the inference, including detected objects  # noqa: E501

        :return: The detections of this InlineResponse20029.  # noqa: E501
        :rtype: list[object]
        """
        return self._detections

    @detections.setter
    def detections(self, detections):
        """Sets the detections of this InlineResponse20029.

        The result of the inference, including detected objects  # noqa: E501

        :param detections: The detections of this InlineResponse20029.  # noqa: E501
        :type: list[object]
        """

        self._detections = detections

    @property
    def image_id(self):
        """Gets the image_id of this InlineResponse20029.  # noqa: E501

        The ID of the image that inference was performed on  # noqa: E501

        :return: The image_id of this InlineResponse20029.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this InlineResponse20029.

        The ID of the image that inference was performed on  # noqa: E501

        :param image_id: The image_id of this InlineResponse20029.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20029, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20029):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
