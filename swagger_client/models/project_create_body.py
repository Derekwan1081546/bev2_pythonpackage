# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'username': 'str',
        'projectname': 'str',
        'project_description': 'str',
        'type': 'str'
    }

    attribute_map = {
        'token': 'token',
        'username': 'username',
        'projectname': 'projectname',
        'project_description': 'projectDescription',
        'type': 'type'
    }

    def __init__(self, token=None, username=None, projectname=None, project_description=None, type=None):  # noqa: E501
        """ProjectCreateBody - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._username = None
        self._projectname = None
        self._project_description = None
        self._type = None
        self.discriminator = None
        if token is not None:
            self.token = token
        if username is not None:
            self.username = username
        if projectname is not None:
            self.projectname = projectname
        if project_description is not None:
            self.project_description = project_description
        if type is not None:
            self.type = type

    @property
    def token(self):
        """Gets the token of this ProjectCreateBody.  # noqa: E501

        Access token to authenticate the request  # noqa: E501

        :return: The token of this ProjectCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ProjectCreateBody.

        Access token to authenticate the request  # noqa: E501

        :param token: The token of this ProjectCreateBody.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def username(self):
        """Gets the username of this ProjectCreateBody.  # noqa: E501

        User ID for which the project is being created  # noqa: E501

        :return: The username of this ProjectCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ProjectCreateBody.

        User ID for which the project is being created  # noqa: E501

        :param username: The username of this ProjectCreateBody.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def projectname(self):
        """Gets the projectname of this ProjectCreateBody.  # noqa: E501

        Name of the project; does not need to be unique, as each project will be assigned a unique project_id  # noqa: E501

        :return: The projectname of this ProjectCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._projectname

    @projectname.setter
    def projectname(self, projectname):
        """Sets the projectname of this ProjectCreateBody.

        Name of the project; does not need to be unique, as each project will be assigned a unique project_id  # noqa: E501

        :param projectname: The projectname of this ProjectCreateBody.  # noqa: E501
        :type: str
        """

        self._projectname = projectname

    @property
    def project_description(self):
        """Gets the project_description of this ProjectCreateBody.  # noqa: E501

        Description of the project  # noqa: E501

        :return: The project_description of this ProjectCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this ProjectCreateBody.

        Description of the project  # noqa: E501

        :param project_description: The project_description of this ProjectCreateBody.  # noqa: E501
        :type: str
        """

        self._project_description = project_description

    @property
    def type(self):
        """Gets the type of this ProjectCreateBody.  # noqa: E501

        either 'AI Model training' or 'Image generation'  # noqa: E501

        :return: The type of this ProjectCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectCreateBody.

        either 'AI Model training' or 'Image generation'  # noqa: E501

        :param type: The type of this ProjectCreateBody.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
