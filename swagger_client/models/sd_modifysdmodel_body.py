# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SdModifysdmodelBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'description': 'str',
        'modelname': 'str',
        'checkpoint': 'str',
        'base64': 'str'
    }

    attribute_map = {
        'token': 'token',
        'description': 'description',
        'modelname': 'modelname',
        'checkpoint': 'checkpoint',
        'base64': 'base64'
    }

    def __init__(self, token=None, description=None, modelname=None, checkpoint=None, base64=None):  # noqa: E501
        """SdModifysdmodelBody - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._description = None
        self._modelname = None
        self._checkpoint = None
        self._base64 = None
        self.discriminator = None
        if token is not None:
            self.token = token
        if description is not None:
            self.description = description
        if modelname is not None:
            self.modelname = modelname
        if checkpoint is not None:
            self.checkpoint = checkpoint
        if base64 is not None:
            self.base64 = base64

    @property
    def token(self):
        """Gets the token of this SdModifysdmodelBody.  # noqa: E501

        Access token to authenticate the request  # noqa: E501

        :return: The token of this SdModifysdmodelBody.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SdModifysdmodelBody.

        Access token to authenticate the request  # noqa: E501

        :param token: The token of this SdModifysdmodelBody.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def description(self):
        """Gets the description of this SdModifysdmodelBody.  # noqa: E501

        Description of the Stable Diffusion model  # noqa: E501

        :return: The description of this SdModifysdmodelBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SdModifysdmodelBody.

        Description of the Stable Diffusion model  # noqa: E501

        :param description: The description of this SdModifysdmodelBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def modelname(self):
        """Gets the modelname of this SdModifysdmodelBody.  # noqa: E501

        The name of the Stable Diffusion model  # noqa: E501

        :return: The modelname of this SdModifysdmodelBody.  # noqa: E501
        :rtype: str
        """
        return self._modelname

    @modelname.setter
    def modelname(self, modelname):
        """Sets the modelname of this SdModifysdmodelBody.

        The name of the Stable Diffusion model  # noqa: E501

        :param modelname: The modelname of this SdModifysdmodelBody.  # noqa: E501
        :type: str
        """

        self._modelname = modelname

    @property
    def checkpoint(self):
        """Gets the checkpoint of this SdModifysdmodelBody.  # noqa: E501

        The checkpoint identifier for the model being modified  # noqa: E501

        :return: The checkpoint of this SdModifysdmodelBody.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint

    @checkpoint.setter
    def checkpoint(self, checkpoint):
        """Sets the checkpoint of this SdModifysdmodelBody.

        The checkpoint identifier for the model being modified  # noqa: E501

        :param checkpoint: The checkpoint of this SdModifysdmodelBody.  # noqa: E501
        :type: str
        """

        self._checkpoint = checkpoint

    @property
    def base64(self):
        """Gets the base64 of this SdModifysdmodelBody.  # noqa: E501

        Base64 encoded image representing the model's updated style  # noqa: E501

        :return: The base64 of this SdModifysdmodelBody.  # noqa: E501
        :rtype: str
        """
        return self._base64

    @base64.setter
    def base64(self, base64):
        """Sets the base64 of this SdModifysdmodelBody.

        Base64 encoded image representing the model's updated style  # noqa: E501

        :param base64: The base64 of this SdModifysdmodelBody.  # noqa: E501
        :type: str
        """

        self._base64 = base64

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SdModifysdmodelBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SdModifysdmodelBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
