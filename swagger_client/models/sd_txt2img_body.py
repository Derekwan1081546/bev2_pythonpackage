# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SdTxt2imgBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'username': 'str',
        'projectname': 'str',
        'count': 'int',
        'enable_hr': 'bool',
        'denoising_strength': 'float',
        'hr_scale': 'float',
        'hr_upscaler': 'str',
        'hr_second_pass_steps': 'int',
        'hr_resize_x': 'int',
        'hr_resize_y': 'int',
        'prompt': 'str',
        'styles': 'list[str]',
        'seed': 'int',
        'batch_size': 'int',
        'n_iter': 'int',
        'steps': 'int',
        'cfg_scale': 'float',
        'width': 'int',
        'height': 'int',
        'restore_faces': 'bool',
        'tiling': 'bool',
        'negative_prompt': 'str',
        'eta': 'float',
        'override_settings': 'Apiv2sdtxt2imgOverrideSettings',
        'script_args': 'list[str]',
        'sampler_index': 'str',
        'alwayson_scripts': 'object'
    }

    attribute_map = {
        'token': 'token',
        'username': 'username',
        'projectname': 'projectname',
        'count': 'count',
        'enable_hr': 'enable_hr',
        'denoising_strength': 'denoising_strength',
        'hr_scale': 'hr_scale',
        'hr_upscaler': 'hr_upscaler',
        'hr_second_pass_steps': 'hr_second_pass_steps',
        'hr_resize_x': 'hr_resize_x',
        'hr_resize_y': 'hr_resize_y',
        'prompt': 'prompt',
        'styles': 'styles',
        'seed': 'seed',
        'batch_size': 'batch_size',
        'n_iter': 'n_iter',
        'steps': 'steps',
        'cfg_scale': 'cfg_scale',
        'width': 'width',
        'height': 'height',
        'restore_faces': 'restore_faces',
        'tiling': 'tiling',
        'negative_prompt': 'negative_prompt',
        'eta': 'eta',
        'override_settings': 'override_settings',
        'script_args': 'script_args',
        'sampler_index': 'sampler_index',
        'alwayson_scripts': 'alwayson_scripts'
    }

    def __init__(self, token=None, username=None, projectname=None, count=None, enable_hr=None, denoising_strength=None, hr_scale=None, hr_upscaler=None, hr_second_pass_steps=None, hr_resize_x=None, hr_resize_y=None, prompt=None, styles=None, seed=None, batch_size=None, n_iter=None, steps=None, cfg_scale=None, width=None, height=None, restore_faces=None, tiling=None, negative_prompt=None, eta=None, override_settings=None, script_args=None, sampler_index=None, alwayson_scripts=None):  # noqa: E501
        """SdTxt2imgBody - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._username = None
        self._projectname = None
        self._count = None
        self._enable_hr = None
        self._denoising_strength = None
        self._hr_scale = None
        self._hr_upscaler = None
        self._hr_second_pass_steps = None
        self._hr_resize_x = None
        self._hr_resize_y = None
        self._prompt = None
        self._styles = None
        self._seed = None
        self._batch_size = None
        self._n_iter = None
        self._steps = None
        self._cfg_scale = None
        self._width = None
        self._height = None
        self._restore_faces = None
        self._tiling = None
        self._negative_prompt = None
        self._eta = None
        self._override_settings = None
        self._script_args = None
        self._sampler_index = None
        self._alwayson_scripts = None
        self.discriminator = None
        if token is not None:
            self.token = token
        if username is not None:
            self.username = username
        if projectname is not None:
            self.projectname = projectname
        if count is not None:
            self.count = count
        if enable_hr is not None:
            self.enable_hr = enable_hr
        if denoising_strength is not None:
            self.denoising_strength = denoising_strength
        if hr_scale is not None:
            self.hr_scale = hr_scale
        if hr_upscaler is not None:
            self.hr_upscaler = hr_upscaler
        if hr_second_pass_steps is not None:
            self.hr_second_pass_steps = hr_second_pass_steps
        if hr_resize_x is not None:
            self.hr_resize_x = hr_resize_x
        if hr_resize_y is not None:
            self.hr_resize_y = hr_resize_y
        if prompt is not None:
            self.prompt = prompt
        if styles is not None:
            self.styles = styles
        if seed is not None:
            self.seed = seed
        if batch_size is not None:
            self.batch_size = batch_size
        if n_iter is not None:
            self.n_iter = n_iter
        if steps is not None:
            self.steps = steps
        if cfg_scale is not None:
            self.cfg_scale = cfg_scale
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if restore_faces is not None:
            self.restore_faces = restore_faces
        if tiling is not None:
            self.tiling = tiling
        if negative_prompt is not None:
            self.negative_prompt = negative_prompt
        if eta is not None:
            self.eta = eta
        if override_settings is not None:
            self.override_settings = override_settings
        if script_args is not None:
            self.script_args = script_args
        if sampler_index is not None:
            self.sampler_index = sampler_index
        if alwayson_scripts is not None:
            self.alwayson_scripts = alwayson_scripts

    @property
    def token(self):
        """Gets the token of this SdTxt2imgBody.  # noqa: E501

        Access token to authenticate the request  # noqa: E501

        :return: The token of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SdTxt2imgBody.

        Access token to authenticate the request  # noqa: E501

        :param token: The token of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def username(self):
        """Gets the username of this SdTxt2imgBody.  # noqa: E501

        User ID requesting the image generation  # noqa: E501

        :return: The username of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SdTxt2imgBody.

        User ID requesting the image generation  # noqa: E501

        :param username: The username of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def projectname(self):
        """Gets the projectname of this SdTxt2imgBody.  # noqa: E501

        The project name for which the images are being generated  # noqa: E501

        :return: The projectname of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._projectname

    @projectname.setter
    def projectname(self, projectname):
        """Sets the projectname of this SdTxt2imgBody.

        The project name for which the images are being generated  # noqa: E501

        :param projectname: The projectname of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._projectname = projectname

    @property
    def count(self):
        """Gets the count of this SdTxt2imgBody.  # noqa: E501

        Number of images to generate  # noqa: E501

        :return: The count of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SdTxt2imgBody.

        Number of images to generate  # noqa: E501

        :param count: The count of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def enable_hr(self):
        """Gets the enable_hr of this SdTxt2imgBody.  # noqa: E501

        Enable high-resolution generation  # noqa: E501

        :return: The enable_hr of this SdTxt2imgBody.  # noqa: E501
        :rtype: bool
        """
        return self._enable_hr

    @enable_hr.setter
    def enable_hr(self, enable_hr):
        """Sets the enable_hr of this SdTxt2imgBody.

        Enable high-resolution generation  # noqa: E501

        :param enable_hr: The enable_hr of this SdTxt2imgBody.  # noqa: E501
        :type: bool
        """

        self._enable_hr = enable_hr

    @property
    def denoising_strength(self):
        """Gets the denoising_strength of this SdTxt2imgBody.  # noqa: E501

        The denoising strength for the high-resolution pass  # noqa: E501

        :return: The denoising_strength of this SdTxt2imgBody.  # noqa: E501
        :rtype: float
        """
        return self._denoising_strength

    @denoising_strength.setter
    def denoising_strength(self, denoising_strength):
        """Sets the denoising_strength of this SdTxt2imgBody.

        The denoising strength for the high-resolution pass  # noqa: E501

        :param denoising_strength: The denoising_strength of this SdTxt2imgBody.  # noqa: E501
        :type: float
        """

        self._denoising_strength = denoising_strength

    @property
    def hr_scale(self):
        """Gets the hr_scale of this SdTxt2imgBody.  # noqa: E501

        High-resolution scaling factor  # noqa: E501

        :return: The hr_scale of this SdTxt2imgBody.  # noqa: E501
        :rtype: float
        """
        return self._hr_scale

    @hr_scale.setter
    def hr_scale(self, hr_scale):
        """Sets the hr_scale of this SdTxt2imgBody.

        High-resolution scaling factor  # noqa: E501

        :param hr_scale: The hr_scale of this SdTxt2imgBody.  # noqa: E501
        :type: float
        """

        self._hr_scale = hr_scale

    @property
    def hr_upscaler(self):
        """Gets the hr_upscaler of this SdTxt2imgBody.  # noqa: E501

        The upscaler to use for high-resolution images  # noqa: E501

        :return: The hr_upscaler of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._hr_upscaler

    @hr_upscaler.setter
    def hr_upscaler(self, hr_upscaler):
        """Sets the hr_upscaler of this SdTxt2imgBody.

        The upscaler to use for high-resolution images  # noqa: E501

        :param hr_upscaler: The hr_upscaler of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._hr_upscaler = hr_upscaler

    @property
    def hr_second_pass_steps(self):
        """Gets the hr_second_pass_steps of this SdTxt2imgBody.  # noqa: E501

        The number of steps for the second pass during high-resolution processing  # noqa: E501

        :return: The hr_second_pass_steps of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._hr_second_pass_steps

    @hr_second_pass_steps.setter
    def hr_second_pass_steps(self, hr_second_pass_steps):
        """Sets the hr_second_pass_steps of this SdTxt2imgBody.

        The number of steps for the second pass during high-resolution processing  # noqa: E501

        :param hr_second_pass_steps: The hr_second_pass_steps of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._hr_second_pass_steps = hr_second_pass_steps

    @property
    def hr_resize_x(self):
        """Gets the hr_resize_x of this SdTxt2imgBody.  # noqa: E501

        Horizontal resize value for the high-resolution pass  # noqa: E501

        :return: The hr_resize_x of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._hr_resize_x

    @hr_resize_x.setter
    def hr_resize_x(self, hr_resize_x):
        """Sets the hr_resize_x of this SdTxt2imgBody.

        Horizontal resize value for the high-resolution pass  # noqa: E501

        :param hr_resize_x: The hr_resize_x of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._hr_resize_x = hr_resize_x

    @property
    def hr_resize_y(self):
        """Gets the hr_resize_y of this SdTxt2imgBody.  # noqa: E501

        Vertical resize value for the high-resolution pass  # noqa: E501

        :return: The hr_resize_y of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._hr_resize_y

    @hr_resize_y.setter
    def hr_resize_y(self, hr_resize_y):
        """Sets the hr_resize_y of this SdTxt2imgBody.

        Vertical resize value for the high-resolution pass  # noqa: E501

        :param hr_resize_y: The hr_resize_y of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._hr_resize_y = hr_resize_y

    @property
    def prompt(self):
        """Gets the prompt of this SdTxt2imgBody.  # noqa: E501

        The main text prompt for generating images  # noqa: E501

        :return: The prompt of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this SdTxt2imgBody.

        The main text prompt for generating images  # noqa: E501

        :param prompt: The prompt of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def styles(self):
        """Gets the styles of this SdTxt2imgBody.  # noqa: E501

        Array of styles to apply to the generated image  # noqa: E501

        :return: The styles of this SdTxt2imgBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this SdTxt2imgBody.

        Array of styles to apply to the generated image  # noqa: E501

        :param styles: The styles of this SdTxt2imgBody.  # noqa: E501
        :type: list[str]
        """

        self._styles = styles

    @property
    def seed(self):
        """Gets the seed of this SdTxt2imgBody.  # noqa: E501

        The seed for the random number generator, -1 for random  # noqa: E501

        :return: The seed of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this SdTxt2imgBody.

        The seed for the random number generator, -1 for random  # noqa: E501

        :param seed: The seed of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._seed = seed

    @property
    def batch_size(self):
        """Gets the batch_size of this SdTxt2imgBody.  # noqa: E501

        The number of images per batch  # noqa: E501

        :return: The batch_size of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this SdTxt2imgBody.

        The number of images per batch  # noqa: E501

        :param batch_size: The batch_size of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def n_iter(self):
        """Gets the n_iter of this SdTxt2imgBody.  # noqa: E501

        Number of iterations for generating images  # noqa: E501

        :return: The n_iter of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._n_iter

    @n_iter.setter
    def n_iter(self, n_iter):
        """Sets the n_iter of this SdTxt2imgBody.

        Number of iterations for generating images  # noqa: E501

        :param n_iter: The n_iter of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._n_iter = n_iter

    @property
    def steps(self):
        """Gets the steps of this SdTxt2imgBody.  # noqa: E501

        Number of steps for the generation process  # noqa: E501

        :return: The steps of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this SdTxt2imgBody.

        Number of steps for the generation process  # noqa: E501

        :param steps: The steps of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._steps = steps

    @property
    def cfg_scale(self):
        """Gets the cfg_scale of this SdTxt2imgBody.  # noqa: E501

        Classifier free guidance scale  # noqa: E501

        :return: The cfg_scale of this SdTxt2imgBody.  # noqa: E501
        :rtype: float
        """
        return self._cfg_scale

    @cfg_scale.setter
    def cfg_scale(self, cfg_scale):
        """Sets the cfg_scale of this SdTxt2imgBody.

        Classifier free guidance scale  # noqa: E501

        :param cfg_scale: The cfg_scale of this SdTxt2imgBody.  # noqa: E501
        :type: float
        """

        self._cfg_scale = cfg_scale

    @property
    def width(self):
        """Gets the width of this SdTxt2imgBody.  # noqa: E501

        Width of the generated image  # noqa: E501

        :return: The width of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SdTxt2imgBody.

        Width of the generated image  # noqa: E501

        :param width: The width of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this SdTxt2imgBody.  # noqa: E501

        Height of the generated image  # noqa: E501

        :return: The height of this SdTxt2imgBody.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SdTxt2imgBody.

        Height of the generated image  # noqa: E501

        :param height: The height of this SdTxt2imgBody.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def restore_faces(self):
        """Gets the restore_faces of this SdTxt2imgBody.  # noqa: E501

        Restore faces in the generated images  # noqa: E501

        :return: The restore_faces of this SdTxt2imgBody.  # noqa: E501
        :rtype: bool
        """
        return self._restore_faces

    @restore_faces.setter
    def restore_faces(self, restore_faces):
        """Sets the restore_faces of this SdTxt2imgBody.

        Restore faces in the generated images  # noqa: E501

        :param restore_faces: The restore_faces of this SdTxt2imgBody.  # noqa: E501
        :type: bool
        """

        self._restore_faces = restore_faces

    @property
    def tiling(self):
        """Gets the tiling of this SdTxt2imgBody.  # noqa: E501

        Enable tiling for the generated images  # noqa: E501

        :return: The tiling of this SdTxt2imgBody.  # noqa: E501
        :rtype: bool
        """
        return self._tiling

    @tiling.setter
    def tiling(self, tiling):
        """Sets the tiling of this SdTxt2imgBody.

        Enable tiling for the generated images  # noqa: E501

        :param tiling: The tiling of this SdTxt2imgBody.  # noqa: E501
        :type: bool
        """

        self._tiling = tiling

    @property
    def negative_prompt(self):
        """Gets the negative_prompt of this SdTxt2imgBody.  # noqa: E501

        Text prompt to avoid in the generated images  # noqa: E501

        :return: The negative_prompt of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._negative_prompt

    @negative_prompt.setter
    def negative_prompt(self, negative_prompt):
        """Sets the negative_prompt of this SdTxt2imgBody.

        Text prompt to avoid in the generated images  # noqa: E501

        :param negative_prompt: The negative_prompt of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._negative_prompt = negative_prompt

    @property
    def eta(self):
        """Gets the eta of this SdTxt2imgBody.  # noqa: E501

        ETA value for generation  # noqa: E501

        :return: The eta of this SdTxt2imgBody.  # noqa: E501
        :rtype: float
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """Sets the eta of this SdTxt2imgBody.

        ETA value for generation  # noqa: E501

        :param eta: The eta of this SdTxt2imgBody.  # noqa: E501
        :type: float
        """

        self._eta = eta

    @property
    def override_settings(self):
        """Gets the override_settings of this SdTxt2imgBody.  # noqa: E501


        :return: The override_settings of this SdTxt2imgBody.  # noqa: E501
        :rtype: Apiv2sdtxt2imgOverrideSettings
        """
        return self._override_settings

    @override_settings.setter
    def override_settings(self, override_settings):
        """Sets the override_settings of this SdTxt2imgBody.


        :param override_settings: The override_settings of this SdTxt2imgBody.  # noqa: E501
        :type: Apiv2sdtxt2imgOverrideSettings
        """

        self._override_settings = override_settings

    @property
    def script_args(self):
        """Gets the script_args of this SdTxt2imgBody.  # noqa: E501

        Arguments for additional scripts  # noqa: E501

        :return: The script_args of this SdTxt2imgBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._script_args

    @script_args.setter
    def script_args(self, script_args):
        """Sets the script_args of this SdTxt2imgBody.

        Arguments for additional scripts  # noqa: E501

        :param script_args: The script_args of this SdTxt2imgBody.  # noqa: E501
        :type: list[str]
        """

        self._script_args = script_args

    @property
    def sampler_index(self):
        """Gets the sampler_index of this SdTxt2imgBody.  # noqa: E501

        Sampler to use for generation  # noqa: E501

        :return: The sampler_index of this SdTxt2imgBody.  # noqa: E501
        :rtype: str
        """
        return self._sampler_index

    @sampler_index.setter
    def sampler_index(self, sampler_index):
        """Sets the sampler_index of this SdTxt2imgBody.

        Sampler to use for generation  # noqa: E501

        :param sampler_index: The sampler_index of this SdTxt2imgBody.  # noqa: E501
        :type: str
        """

        self._sampler_index = sampler_index

    @property
    def alwayson_scripts(self):
        """Gets the alwayson_scripts of this SdTxt2imgBody.  # noqa: E501

        Always-on scripts to use during generation  # noqa: E501

        :return: The alwayson_scripts of this SdTxt2imgBody.  # noqa: E501
        :rtype: object
        """
        return self._alwayson_scripts

    @alwayson_scripts.setter
    def alwayson_scripts(self, alwayson_scripts):
        """Sets the alwayson_scripts of this SdTxt2imgBody.

        Always-on scripts to use during generation  # noqa: E501

        :param alwayson_scripts: The alwayson_scripts of this SdTxt2imgBody.  # noqa: E501
        :type: object
        """

        self._alwayson_scripts = alwayson_scripts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SdTxt2imgBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SdTxt2imgBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
