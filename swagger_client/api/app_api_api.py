# coding: utf-8

"""
    BE v2 API

    API documentation for BE v2, handling authentication, project management, image operations, model management, and EC2 context.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class APPAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_download_image_origin_post(self, body, **kwargs):  # noqa: E501
        """Download Original Image from S3  # noqa: E501

        This API is responsible for downloading the original images stored in S3.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_download_image_origin_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DownloadImageOriginBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_download_image_origin_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_download_image_origin_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_download_image_origin_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download Original Image from S3  # noqa: E501

        This API is responsible for downloading the original images stored in S3.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_download_image_origin_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DownloadImageOriginBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_download_image_origin_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_download_image_origin_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/downloadImageOrigin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_download_image_post(self, body, **kwargs):  # noqa: E501
        """Download Image After Inference  # noqa: E501

        This API is responsible for downloading images after inference from S3 storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_download_image_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DownloadImageBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_download_image_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_download_image_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_download_image_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download Image After Inference  # noqa: E501

        This API is responsible for downloading images after inference from S3 storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_download_image_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DownloadImageBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_download_image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_download_image_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/downloadImage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedback_post(self, body, **kwargs):  # noqa: E501
        """Model Inference Feedback  # noqa: E501

        This API is responsible for providing feedback on model inference. Users can label objects on images and send the label information to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1FeedbackBody body: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedback_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedback_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_feedback_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Model Inference Feedback  # noqa: E501

        This API is responsible for providing feedback on model inference. Users can label objects on images and send the label information to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1FeedbackBody body: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedback_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_feedback_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_get_model_list_post(self, body, **kwargs):  # noqa: E501
        """Get Model List from RDS and S3  # noqa: E501

        This API is responsible for getting the list of available models stored in both RDS and S3.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_get_model_list_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetModelListBody body: (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_get_model_list_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_get_model_list_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_get_model_list_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get Model List from RDS and S3  # noqa: E501

        This API is responsible for getting the list of available models stored in both RDS and S3.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_get_model_list_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetModelListBody body: (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_get_model_list_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_get_model_list_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/getModelList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_get_model_post(self, body, **kwargs):  # noqa: E501
        """Download Model from RDS and S3  # noqa: E501

        This API is responsible for downloading a model stored in RDS or S3.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_get_model_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetModelBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_get_model_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_get_model_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_get_model_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download Model from RDS and S3  # noqa: E501

        This API is responsible for downloading a model stored in RDS or S3.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_get_model_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetModelBody body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_get_model_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_get_model_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/getModel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_remote_inference_by_id_post(self, body, **kwargs):  # noqa: E501
        """Run Inference on Image by ID  # noqa: E501

        This API is responsible for running inference on images that are saved in S3. Images must be uploaded using the `imageUpload` API first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_remote_inference_by_id_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1RemoteInferenceByIdBody body: (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_remote_inference_by_id_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_remote_inference_by_id_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_remote_inference_by_id_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Run Inference on Image by ID  # noqa: E501

        This API is responsible for running inference on images that are saved in S3. Images must be uploaded using the `imageUpload` API first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_remote_inference_by_id_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1RemoteInferenceByIdBody body: (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_remote_inference_by_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_remote_inference_by_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/remoteInferenceById', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_style_transform_post(self, access_token, file, transform_style, device_info, **kwargs):  # noqa: E501
        """Style Transform for Image  # noqa: E501

        This API is responsible for uploading images to run inference with style transformation. Users can apply different styles such as \"Pixart\" or \"RealTek\" to an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_style_transform_post(access_token, file, transform_style, device_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: (required)
        :param str file: (required)
        :param str transform_style: (required)
        :param str device_info: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_style_transform_post_with_http_info(access_token, file, transform_style, device_info, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_style_transform_post_with_http_info(access_token, file, transform_style, device_info, **kwargs)  # noqa: E501
            return data

    def api_v1_style_transform_post_with_http_info(self, access_token, file, transform_style, device_info, **kwargs):  # noqa: E501
        """Style Transform for Image  # noqa: E501

        This API is responsible for uploading images to run inference with style transformation. Users can apply different styles such as \"Pixart\" or \"RealTek\" to an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_style_transform_post_with_http_info(access_token, file, transform_style, device_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: (required)
        :param str file: (required)
        :param str transform_style: (required)
        :param str device_info: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'file', 'transform_style', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_style_transform_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `api_v1_style_transform_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_v1_style_transform_post`")  # noqa: E501
        # verify the required parameter 'transform_style' is set
        if ('transform_style' not in params or
                params['transform_style'] is None):
            raise ValueError("Missing the required parameter `transform_style` when calling `api_v1_style_transform_post`")  # noqa: E501
        # verify the required parameter 'device_info' is set
        if ('device_info' not in params or
                params['device_info'] is None):
            raise ValueError("Missing the required parameter `device_info` when calling `api_v1_style_transform_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access_token' in params:
            form_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'transform_style' in params:
            form_params.append(('transform_style', params['transform_style']))  # noqa: E501
        if 'device_info' in params:
            form_params.append(('DeviceInfo', params['device_info']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/styleTransform', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_upload_image_post(self, access_token, original_image_file, purpose, device_info, label_info, description, **kwargs):  # noqa: E501
        """Upload Image for Inference or Dataset  # noqa: E501

        This API is responsible for uploading images to run inference or store as a dataset. The image will be saved to S3, and its metadata will be inserted into the RDS image table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_upload_image_post(access_token, original_image_file, purpose, device_info, label_info, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: (required)
        :param str original_image_file: (required)
        :param str purpose: (required)
        :param str device_info: (required)
        :param str label_info: (required)
        :param str description: (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_upload_image_post_with_http_info(access_token, original_image_file, purpose, device_info, label_info, description, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_upload_image_post_with_http_info(access_token, original_image_file, purpose, device_info, label_info, description, **kwargs)  # noqa: E501
            return data

    def api_v1_upload_image_post_with_http_info(self, access_token, original_image_file, purpose, device_info, label_info, description, **kwargs):  # noqa: E501
        """Upload Image for Inference or Dataset  # noqa: E501

        This API is responsible for uploading images to run inference or store as a dataset. The image will be saved to S3, and its metadata will be inserted into the RDS image table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_upload_image_post_with_http_info(access_token, original_image_file, purpose, device_info, label_info, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_token: (required)
        :param str original_image_file: (required)
        :param str purpose: (required)
        :param str device_info: (required)
        :param str label_info: (required)
        :param str description: (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'original_image_file', 'purpose', 'device_info', 'label_info', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_upload_image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params or
                params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `api_v1_upload_image_post`")  # noqa: E501
        # verify the required parameter 'original_image_file' is set
        if ('original_image_file' not in params or
                params['original_image_file'] is None):
            raise ValueError("Missing the required parameter `original_image_file` when calling `api_v1_upload_image_post`")  # noqa: E501
        # verify the required parameter 'purpose' is set
        if ('purpose' not in params or
                params['purpose'] is None):
            raise ValueError("Missing the required parameter `purpose` when calling `api_v1_upload_image_post`")  # noqa: E501
        # verify the required parameter 'device_info' is set
        if ('device_info' not in params or
                params['device_info'] is None):
            raise ValueError("Missing the required parameter `device_info` when calling `api_v1_upload_image_post`")  # noqa: E501
        # verify the required parameter 'label_info' is set
        if ('label_info' not in params or
                params['label_info'] is None):
            raise ValueError("Missing the required parameter `label_info` when calling `api_v1_upload_image_post`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_v1_upload_image_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access_token' in params:
            form_params.append(('access_token', params['access_token']))  # noqa: E501
        if 'original_image_file' in params:
            local_var_files['originalImageFile'] = params['original_image_file']  # noqa: E501
        if 'purpose' in params:
            form_params.append(('Purpose', params['purpose']))  # noqa: E501
        if 'device_info' in params:
            form_params.append(('DeviceInfo', params['device_info']))  # noqa: E501
        if 'label_info' in params:
            form_params.append(('LabelInfo', params['label_info']))  # noqa: E501
        if 'description' in params:
            form_params.append(('Description', params['description']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/uploadImage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
